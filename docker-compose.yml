# Define a versão do Docker Compose que está sendo usada
version: '3.9'  # Versão atualizada e estável

# Declara os serviços que o Docker Compose gerenciará
services:
  # Serviço principal: aplicação Django
  web:
    build: .  # Constrói a imagem do Docker a partir do Dockerfile localizado na raiz do projeto
    command: python manage.py runserver 0.0.0.0:8000  # Inicia o servidor Django na porta 8000
    volumes:
      - .:/usr/src/app/  # Monta o diretório atual (.) dentro do container em /usr/src/app/
    ports:
      - 8000:8000  # Mapeia a porta 8000 do container para a porta 8000 da máquina local
    env_file:
      - ./env.dev  # Carrega variáveis de ambiente do arquivo env.dev
    depends_on:
      - db  # Define que o serviço "web" só iniciará depois que o banco de dados estiver pronto

  # Serviço do banco de dados PostgreSQL
  db:
    image: postgres:13.0-alpine  # Usa a imagem do PostgreSQL versão 13 com Alpine (mais leve e otimizada)
    volumes:
      - postgres_data:/var/lib/postgres/data/  # Armazena os dados do banco de forma persistente
    environment:  # Configurações do PostgreSQL usando variáveis de ambiente
      - POSTGRES_USER=dev  # Usuário do banco de dados
      - POSTGRES_PASSWORD=dev  # Senha do banco de dados
      - POSTGRES_DB=bookstore_db  # Nome do banco de dados
    ports:
      - "5432:5432"
      
# Declara volumes que serão usados para persistência de dados
volumes:
  postgres_data:  # Volume nomeado para armazenar os dados do PostgreSQL
