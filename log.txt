Gitbash 
$ $ tree -I "__pycache__|migrations|*.pyc|env|venv|node_modules|tests/__pycache__" -l 4 > structure.txt

--------------------------------------------------------------------------------------------------------------------------------

#1 declarar (importar) os models no admin.py de cada aplicativo

#2 declarar (importar) os models dentro do  __init__.py da pasta models de cada aplicativo 

#3 declarar os apps (product e order) dentro do bookstore project 
(bookstore/settings.py em INSTALLER_APPS = [..."product", "order"])

#4 deletar o models.py de cada app substituindo por um diretório models

#5 gerar migrações
>> poetry run python manage.py makemigrations
Migrations for 'product':
  product\migrations\0001_initial.py
    + Create model Category
    + Create model Product
Migrations for 'order':
  order\migrations\0001_initial.py
    + Create model Order


#6 migrar
>> poetry run python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, order, product, sessions
Running migrations:
  Applying product.0001_initial... OK
  Applying order.0001_initial... OK

#7 >> poetry add django-rest-framework

#8 criar serializers e importá-los no __init__.py da pasta serializers de cada aplicativo (product/serializers, order/serializers)

#9 criar factory.py para cada um dos aplicativos (product e order)

#10 criar os testes para os serializers nas pastas tests de cada aplicativo 
(order/tests/order_test.py, product/tests/product_test.py, product/tests/category_test.py)

#11 criar o arquivo pytest.ini na raiz do projeto
[pytest]
DJANGO_SETTINGS_MODULE = bookstore.settings

-----------------------------------------------------------------------------------------------------------------------------------

#12 Criar repositórios viewsets em cada um dos apps (order e product)

#13 Criar as viewsets de cada app (order_viewset.py e product_viewset.py)

from rest_framework.viewsets import ModelViewSet

from app.models import App
from app.serializers import AppSerializer

class AppViewSet(ModelViewSet):
    serializer_class = AppSerializer # definir serializer
    queryset = App.objects.all() # definir queryset
    # no caso Add.objects.all é uma query default, ou uma requisição padrão
    # que retorna todos os objetos Order existentes no banco de dados.


#14 criar urls.py para cada App (order e product)

from django.urls import path, include
from rest_framework import routers

from .viewsets.app_viewset import AppViewSet

router = routers.SimpleRouter()
router.register(r'app', AppViewSet, basename='app')


urlpatterns = [
    path('', include(router.urls))
]


#15 Atualizar o urls.py do projeto (bookstore.urls.py)


from django.contrib import admin
from django.urls import path, re_path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    re_path('bookstore/(?P<version>(v1|v2))/', include('order.urls')),
    re_path('bookstore/(?P<version>(v1|v2))/', include('product.urls'))
]

-------------------------------------------------------------------------------------------------------------------

#16 Instalar django-extensions
>> poetry add django-extensions

#17 Adicionar "django-extensions" ao settings.py 

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "order",
    "product",
    "django_extensions"
]


#18 Executar show_urls para visualização de todas a urls do projeto.
>>  poetry run python manage.py show_urls
/admin/ django.contrib.admin.sites.index        admin:index
/admin/<app_label>/     django.contrib.admin.sites.app_index    admin:app_list
/admin/<url>    django.contrib.admin.sites.catch_all_view
/admin/auth/group/      django.contrib.admin.options.changelist_view    admin:auth_group_changelist
/admin/auth/group/<path:object_id>/     django.views.generic.base.RedirectView
/admin/auth/group/<path:object_id>/change/      django.contrib.admin.options.change_view        admin:auth_group_change
/admin/auth/group/<path:object_id>/delete/      django.contrib.admin.options.delete_view        admin:auth_group_delete
/admin/auth/group/<path:object_id>/history/     django.contrib.admin.options.history_view       admin:auth_group_history
/admin/auth/group/add/  django.contrib.admin.options.add_view   admin:auth_group_add
/admin/auth/user/       django.contrib.admin.options.changelist_view    admin:auth_user_changelist
/admin/auth/user/<id>/password/ django.contrib.auth.admin.user_change_password  admin:auth_user_password_change
/admin/auth/user/<path:object_id>/      django.views.generic.base.RedirectView
/admin/auth/user/<path:object_id>/change/       django.contrib.admin.options.change_view        admin:auth_user_change
/admin/auth/user/<path:object_id>/delete/       django.contrib.admin.options.delete_view        admin:auth_user_delete
/admin/auth/user/<path:object_id>/history/      django.contrib.admin.options.history_view       admin:auth_user_history
/admin/auth/user/add/   django.contrib.auth.admin.add_view      admin:auth_user_add
/admin/autocomplete/    django.contrib.admin.sites.autocomplete_view    admin:autocomplete
/admin/jsi18n/  django.contrib.admin.sites.i18n_javascript      admin:jsi18n
/admin/login/   django.contrib.admin.sites.login        admin:login
/admin/logout/  django.contrib.admin.sites.logout       admin:logout
/admin/password_change/ django.contrib.admin.sites.password_change      admin:password_change
/admin/password_change/done/    django.contrib.admin.sites.password_change_done admin:password_change_done
/admin/r/<int:content_type_id>/<path:object_id>/        django.contrib.contenttypes.views.shortcut      admin:view_on_site
/bookstore/<version>/order/     order.viewsets.order_viewset.OrderViewSet       order-list
/bookstore/<version>/order/<pk>/        order.viewsets.order_viewset.OrderViewSet       order-detail
/bookstore/<version>/product/   product.viewsets.product_viewset.ProductViewSet product-list
/bookstore/<version>/product/<pk>/      product.viewsets.product_viewset.ProductViewSet product-detail



-----------------------------------------------------------------------------------------------------------------------------


#17 Atualizar os serializers (order_serializer.py e product_serializer.py)

# **Resumo do OrderSerializer:**
# - `product` usa o ProductSerializer para serializar os produtos relacionados.
# - `products_id` aceita apenas os IDs dos produtos para criar/atualizar o pedido.
# - O campo `total` é calculado dinamicamente com base nos preços dos produtos associados.
# - A função `create` lida com a criação de um pedido e adiciona os produtos relacionados.

# **Resumo do ProductSerializer:**
# - `category` usa o CategorySerializer para serializar as categorias relacionadas.
# - `categories_id` aceita apenas os IDs das categorias para criar/atualizar o produto.
# - A função `create` lida com a criação de um produto e adiciona as categorias relacionadas.


-----------------------------------------------------------------------------------------------------------------------------

#18 Atualizar passo #10 - Alteração do sistema de pastas de tests 
